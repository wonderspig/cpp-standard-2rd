定义：
namespace std {
	template <typename T, size_t N> 
	class array;
}
Array是一个两头封闭的数组，也就是说元素数量时固定的。(类似于c风格数组)
Array提供随机访问迭代器

初始化：
1.Array是唯一一个"无任何东西被指定为初值时，会被预初始化"的容器
  (对于基础类型，初值不明确，但如果用初始化列表，则没有被初始化的基础类型，初值为0)
  注意：Array没有提供针对初值列的构造函数，和赋值运算符
2.如果Array使用初值列初始化，且初值列中的元素数大于Array的大小，则编译期会发生错误
3.无法使用小括号定义初值(只能使用初值列初始化，因为array只满足聚合体的要求)

swap和move语义：
array的swap和别的容器的swap不同，不能仅仅置换内部的指针，所以具有线性复杂度
且迭代器和指针还指向原来的容器，但因为置换的原因，指向的元素已经不同。

大小：
Array的大小为0是可能的，在这种情况下
任何迭代器返回的都是同一个值
然而front()和back()的返回值不明确，data()的返回值可以传至其他地方，但是不能对这个指针解除引用

Array的操作
1.建立/复制/销毁：原理同以上初始化处。
  Array是一个聚合体，所以构造函数都是被隐式定义出来的
    1.默认构造函数
    2.拷贝构造函数(右值拷贝)
    3.赋值运算符重载(移动赋值运算符)
    4.初始化列表赋值
2.非更易型操作
  1.判空
  2.取得目前的元素个数
  3.返回元素个数的最大可能量
  4.== != > < >= <=
3.赋值
  1.普通赋值
  2.右值赋值
  3.使用成员函数c.fill()赋值Array的每一个元素
  4.swap交换:包括成员函数和非成员函数
    (Array的swap函数并不具备常量复杂度，因为不能仅仅交换内部的指针)
4.元素访问
  1.可以使用区域for循环来访问Array的元素
  2.可以使用迭代器来访问Array的元素(Array提供随机访问迭代器)
  3.可以使用特定的操作函数来访问Array的元素
    1.[]方括号运算符
    2.c.at()成员函数 (会抛出异常)
    3.c.front()  访问Array的第一个元素
    4.c.back()   访问Array的最后一个元素
  4.使用tuple接口访问Array的元素
5.迭代器相关函数
  Array提供了随机访问迭代器
  1.提供了指向第一个元素的迭代器: 一般迭代器，常量迭代器，反向迭代器，反向常量迭代器
  2.提供了指向最后一个元素的迭代器: 一般迭代器，常量迭代器，反向迭代器，反向常量迭代器

Array没有提供任何与某值相等元素移除的成员函数，有这个需要应该调用相应算法

Array的使用
1.把Array当成C风格数组
  取得Array中的元素的指针：&a[i] == &a[0] + i，可以取得索引为i的元素的指针
  c.data()返回的是指向数组第一个元素的指针
  注意：任何时候都不要使用迭代器来表现指针
2.异常处理
  1.c.at()是方括号运算符的安全版本，当下标超出范围时，会抛出异常
  2.因为Array不能安插删除元素，所以异常只可能在拷贝，移动，赋值的过程中发生
  3.Array的swap函数也可能抛出异常，因为Array的swap函数时"元素逐次"的置换动作
3.Array支持tuple接口
typedef std::array<std::string,5> FiveStrings;
FiveStrings a = { "hello", "nico", "how", "are", "you" }; 
std::tuple_size<FiveStrings>::value        //Array的元素个数为5个
std::tuple_element<1,FiveStrings>::type    //Array的第一个元素的类型为string
std::get<1>(a)                             //Array的第二个元素是"nico"
















