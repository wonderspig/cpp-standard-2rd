定义：
namespace std {
	template <typename T,typename Allocator = allocator<T> > 
	class deque;
}
deque和vector类似，也使用动态数组来管理，和vector有着几乎一模一样的接口
不同的是deque可以在头尾两端进行快速的安插和删除
为了能使头尾两端快速安插和删除，deque实现的是独立区块，第一区朝某方向发展，最末区朝另一方向发展
deque提供随机访问迭代器

deque和vector的详细区别对比：
1.deque头尾两端都能快速的安插和移除元素
2.deque访问元素有个间接的过程，所以速度稍慢
3.deque的迭代器要在不同区块间跳转，所以只可能是智能指针，不可能是普通指针
4.deque因为有多个区块，所以可以含有更多元素
5.deque不能对容量和内存重新分配的时机进行控制
  在头尾两端安插或删除元素，都有可能导致内存重新分配，从而导致引用，指针和迭代器失效
  但是deque重新分配内存的时候不必复制所有元素，重新分配的效率较好
6.deque会释放不使用的内存块，deque的内存大小可以缩减，但具体取决于实现

deque和vector的相似之处：
1.在中段安插删除元素的速度较慢
2.迭代器都是随机访问迭代器

建议用deque之处：
1.在头尾两端安插元素
2.无需指向容器内的元素
3.要求不再使用的元素进行释放(C++标准没有任何保证)

deque的操作函数
1.构造 复制和销毁
  1.默认构造函数
  2.拷贝构造(右值拷贝构造)
  3.赋值运算符(移动赋值运算符)
  4.指定元素个数的构造函数(会调用默认构造函数为每个元素初始化)
  5.指定元素个数，和每个元素初值的构造函数
  6.指定某个区间的构造函数
  7.初值列构造函数
  8.初值列赋值运算符
  注意：与vector不同之处：
     1.deque不提供容量操作:capacity()和reserve()
     2.deque直接提供头部的安插和删除
2.非更易型操作
  1.判空
  2.取得目前容器元素数目
  3.取得容器最大的可能元素数
  4.降低容量(非强制)
  5.!= == < <= >= >
  6.[]运算符
  7.c.at()成员函数 (会抛出异常)
  8.c.front()  访问vector的第一个元素
  9.c.back()   访问vector的最后一个元素
  10.提供随机访问迭代器
     1.提供了指向第一个元素的迭代器: 一般迭代器，常量迭代器，反向迭代器，反向常量迭代器
     2.提供了指向最后一个元素的迭代器: 一般迭代器，常量迭代器，反向迭代器，反向常量迭代器
  注意：1.除了at()，没有任何函数会检查索引或迭代器是否有效
       2.元素的安插和删除会导致内存重新分配：
         1.如果在中段插入，任何指针，引用或迭代器都会失效
         2.如果在头尾插入，指针和引用会继续有效，迭代器还是会失效
3.更易型操作
  1.普通赋值运算符
  2.移动赋值运算符
  3.初值列赋值运算符
  4.assign赋值(n个elem)
  5.assign赋值指定某个区间
  6.assign赋值初值列
  7.成员swap和非成员swap
  8.最后压入一个元素
  9.弹出最后一个元素(不反回最后一个元素)
  10.在头部插入一个元素
  11.弹出第一个元素(不返回第一个元素)
  insert
  (所有插入函数返回新元素的位置，没有新元素则返回pos)
  12.在pos位置插入一个elem
  13.在pos位置插入n个elem
  14.在pos位置插入一个区间中的元素
  15.在pos位置插入一个初值列中的元素
  emplace
  (所有插入函数返回新元素的位置)
  16.在pos位置插入args为初值的元素
  17.在容器末尾插入args为初值的元素(不反回任何东西)
  18.在容器头部插入args为初值的元素(不反回任何东西)
  erase
  (删除元素都返回下一个元素的位置)
  19.移除pos位置上的元素
  20.移除区间中的元素
  resize
  21.元素数量改为num(如果数量变大，多出来的元素以默认构造函数初始化)
  22.元素数改为num(如果数量变大，多出来的元素为elem)
  clear
  23.移除所有元素，容器为空
  注意：1.所有在末尾进行操作的函数，都不返回任何东西
       2.所有在头部进行操作的函数，都不返回任何东西
       3.弹出最后一个元素时，保证容器不为空是调用者的责任
       4.弹出第一个元素时，保证容器不为空是调用者的责任

deque没有提供任何与某值相等元素移除的成员函数，有这个需要应该调用相应算法

异常处理：
deque的异常处理和vector一样，就有几点区别
1.push_back()和push_front()安插元素时发生异常，该操作不带来任何效应
2.pop_back()和pop_front()绝不会抛出任何异常


























