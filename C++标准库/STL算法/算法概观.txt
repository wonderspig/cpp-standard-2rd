1.头文件
  标准库算法头文件 <algorithm>
  用于数值算法的头文件 <numeric>
  函数对象的头文件 <functional>

2.概述：
  1.算法被用来处理一个或多个迭代器区间
    第一个区间以起点和终点表示
    第二个区间只用起点表示，终点可以根据第一个区间推断出来
    (迭代器和区间的有效性由调用者自己维护，否则后果不确定)
  2.算法默认为覆盖模式，覆盖模式下调用者必须自己保证容器由足够的空间
    当然你可以使用插入迭代器来改变为插入模式
  3.算法为了提高灵活性，可以允许调用者传递自定义操作(寻常函数，函数对象，Lambda)
    如果返回的是boolean，则这就是一个判断式
    判断式可以完成以下工作：
    1.对于查找算法，提供查找准则
    2.对于排序算法，提供排序准则
    3.传递一个一元判断式，判断是否该对元素进行某项操作
    4.可以为某个算法指定☝️数值运算

3.算法分类
  后缀问题：
  后缀_if：有这个后缀的STL算法，要求传入一个自定义操作(函数，函数对象，Lambda)(并非所有)
  后缀_copy：有这个后缀的算法中的元素不仅仅被操作，还会被复制到表弟区间
  1.非更易型算法
    不改动元素次序，也不改动元素值。
  2.更易型算法
    要么直接改变元素值
    要么再复制到另一个区间的过程中，改变元素值(这种情况下，原区间不会发生变化)
    不能以有序关联容器和无序关联容器作为目标区间
  3.移除型算法
    这是一种特殊的更易型算法，移除区间中的元素(移除元素是改变元素的一种特殊情况)
    也可以再复制的过程中进行移除操作(这种情况下，原区间不会变化)
    注意：这个算法只是逻辑上移除元素，其手段是：将不应该被移除的元素往前覆盖应被移除的元素，因此它并不改变操作区间中的元素个数
                                           而是返回逻辑上的终点位置
  4.变序型算法
    通过元素之间的赋值和互换，改变元素顺序，但不改变元素值。
    不能以有序关联容器和无序关联容器作为目标区间
  5.排序算法
    是一种特殊的变序型算法，也是不改变元素值，而改变元素位置(排序一般需要随机访问迭代器)
    排序算法关心的是时间读杂度
  6.已排序区间算法
    作用的某区间再某种排序准则下已经排序，对这种区间进行操作的算法(一般来说，操作后的元素也是已排序的)
  7.数值算法
    以各种不同的方式结合数值元素

4.辅助函数
  本书定义的辅助函数(为了减少后面算法实例代码的长度)
  INSERT_ELEMENTS()将元素安插于第一实参所引入的容器内，元素值来自第二实参，以及之后的所有实参，期间的所有元素都供安插之用
  PRINT_ELEMENTS()将第一实参所引入的容器内的所有元素，打印出来，以空格区分。
                  第二实参可有可无，如有，则会成为前缀打印于元素之前
  PRINT_MAPPED_ELEMENTS()和第二个辅助函数功能相同，但是它适用于key/value pair的元素容器

















